initSidebarItems({"enum":[["MacroFileKind",""]],"mod":[["ast_id_map","`AstIdMap` allows to create stable IDs for \"large\" syntax nodes like items and macro calls."],["db","Defines database & queries for macro expansion."],["diagnostics","Semantic errors and warnings."],["either","FIXME: write short doc here"],["hygiene","This modules handles hygiene information."],["name","FIXME: write short doc here"]],"struct":[["AstId","`AstId` points to an AST node in any file."],["HirFileId","Input to the analyzer is a set of files, where each file is identified by `FileId` and contains source code. However, another source of source code in Rust are macros: each macro can be thought of as producing a \"temporary file\". To assign an id to such a file, we use the id of the macro call that produced the file. So, a `HirFileId` is either a `FileId` (source code written by user), or a `MacroCallId` (source code produced by macro)."],["MacroCallId","`MacroCallId` identifies a particular macro invocation, like `println!(\"Hello, {}\", world)`."],["MacroCallLoc",""],["MacroDefId",""],["MacroFile",""],["Source",""]]});